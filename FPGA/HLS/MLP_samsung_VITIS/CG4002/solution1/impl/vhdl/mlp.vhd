-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    S_AXIS_V_TVALID : IN STD_LOGIC;
    S_AXIS_V_TREADY : OUT STD_LOGIC;
    M_AXIS_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    M_AXIS_V_TVALID : OUT STD_LOGIC;
    M_AXIS_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mlp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp_mlp,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.210500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=207,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_230 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001000110000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_231 : STD_LOGIC_VECTOR (9 downto 0) := "1000110001";
    constant ap_const_lv10_230 : STD_LOGIC_VECTOR (9 downto 0) := "1000110000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal S_AXIS_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln47_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln51_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal icmp_ln51_reg_227_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_1_reg_121 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln47_fu_132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal add_ln51_fu_158_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln51_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln174_1_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal weights_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_0_ce0 : STD_LOGIC;
    signal weights_0_we0 : STD_LOGIC;
    signal weights_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_110 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_cast_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln48_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_1_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln174_1_fu_179_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal bitcast_ln174_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_196_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_S_AXIS_V_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_V_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal S_AXIS_V_TVALID_int_regslice : STD_LOGIC;
    signal S_AXIS_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_S_AXIS_V_U_ack_in : STD_LOGIC;
    signal regslice_both_M_AXIS_V_U_apdone_blk : STD_LOGIC;
    signal M_AXIS_V_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal M_AXIS_V_TVALID_int_regslice : STD_LOGIC;
    signal M_AXIS_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_M_AXIS_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mlp_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    weights_0_U : component mlp_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 561,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_0_address0,
        ce0 => weights_0_ce0,
        we0 => weights_0_we0,
        d0 => weights_0_d0,
        q0 => weights_0_q0);

    regslice_both_S_AXIS_V_U : component mlp_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_V_TDATA,
        vld_in => S_AXIS_V_TVALID,
        ack_in => regslice_both_S_AXIS_V_U_ack_in,
        data_out => S_AXIS_V_TDATA_int_regslice,
        vld_out => S_AXIS_V_TVALID_int_regslice,
        ack_out => S_AXIS_V_TREADY_int_regslice,
        apdone_blk => regslice_both_S_AXIS_V_U_apdone_blk);

    regslice_both_M_AXIS_V_U : component mlp_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_V_TDATA_int_regslice,
        vld_in => M_AXIS_V_TVALID_int_regslice,
        ack_in => M_AXIS_V_TREADY_int_regslice,
        data_out => M_AXIS_V_TDATA,
        vld_out => regslice_both_M_AXIS_V_U_vld_out,
        ack_out => M_AXIS_V_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_1_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_1_reg_121 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_fu_164_p2 = ap_const_lv1_0))) then 
                j_1_reg_121 <= add_ln51_fu_158_p2;
            end if; 
        end if;
    end process;

    j_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_reg_110 <= ap_const_lv10_0;
            elsif ((not(((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_V_TVALID_int_regslice))) and (icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_110 <= add_ln47_fu_132_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln51_reg_227 <= icmp_ln51_fu_164_p2;
                icmp_ln51_reg_227_pp1_iter1_reg <= icmp_ln51_reg_227;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, icmp_ln47_fu_138_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_enable_reg_pp1_iter0, icmp_ln51_fu_164_p2, ap_block_pp1_stage0_subdone, S_AXIS_V_TVALID_int_regslice, M_AXIS_V_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_V_TVALID_int_regslice))) and (icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_V_TVALID_int_regslice))) and (icmp_ln47_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln51_fu_164_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln51_fu_164_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_1 = M_AXIS_V_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = M_AXIS_V_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    M_AXIS_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln51_reg_227, ap_enable_reg_pp1_iter2, icmp_ln51_reg_227_pp1_iter1_reg, ap_CS_fsm_state9, ap_CS_fsm_state10, M_AXIS_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln51_reg_227_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            M_AXIS_V_TDATA_blk_n <= M_AXIS_V_TREADY_int_regslice;
        else 
            M_AXIS_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    M_AXIS_V_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln51_reg_227, ap_CS_fsm_state9, zext_ln174_1_fu_187_p1, zext_ln174_fu_204_p1, ap_block_pp1_stage0_01001, M_AXIS_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_1 = M_AXIS_V_TREADY_int_regslice))) then 
            M_AXIS_V_TDATA_int_regslice <= zext_ln174_fu_204_p1;
        elsif (((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            M_AXIS_V_TDATA_int_regslice <= zext_ln174_1_fu_187_p1;
        else 
            M_AXIS_V_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    M_AXIS_V_TVALID <= regslice_both_M_AXIS_V_U_vld_out;

    M_AXIS_V_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln51_reg_227, ap_CS_fsm_state9, ap_block_pp1_stage0_11001, M_AXIS_V_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_1 = M_AXIS_V_TREADY_int_regslice)) or ((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            M_AXIS_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            M_AXIS_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_138_p2, S_AXIS_V_TVALID_int_regslice)
    begin
        if (((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            S_AXIS_V_TDATA_blk_n <= S_AXIS_V_TVALID_int_regslice;
        else 
            S_AXIS_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_AXIS_V_TREADY <= regslice_both_S_AXIS_V_U_ack_in;

    S_AXIS_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_138_p2, S_AXIS_V_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_V_TVALID_int_regslice))) and (icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            S_AXIS_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            S_AXIS_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln47_fu_132_p2 <= std_logic_vector(unsigned(j_reg_110) + unsigned(ap_const_lv10_1));
    add_ln51_fu_158_p2 <= std_logic_vector(unsigned(j_1_reg_121) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln51_reg_227, ap_enable_reg_pp1_iter2, icmp_ln51_reg_227_pp1_iter1_reg, M_AXIS_V_TREADY_int_regslice)
    begin
                ap_block_pp1_stage0_01001 <= (((icmp_ln51_reg_227_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice)) or ((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln51_reg_227, ap_enable_reg_pp1_iter2, icmp_ln51_reg_227_pp1_iter1_reg, ap_block_state6_io, ap_block_state7_io, M_AXIS_V_TREADY_int_regslice)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln51_reg_227_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice)))) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice)))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln51_reg_227, ap_enable_reg_pp1_iter2, icmp_ln51_reg_227_pp1_iter1_reg, ap_block_state6_io, ap_block_state7_io, M_AXIS_V_TREADY_int_regslice)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln51_reg_227_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice)))) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice)))));
    end process;


    ap_block_state3_assign_proc : process(icmp_ln47_fu_138_p2, S_AXIS_V_TVALID_int_regslice)
    begin
                ap_block_state3 <= ((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_V_TVALID_int_regslice));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(icmp_ln51_reg_227, M_AXIS_V_TREADY_int_regslice)
    begin
                ap_block_state6_io <= ((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice));
    end process;


    ap_block_state6_pp1_stage0_iter1_assign_proc : process(icmp_ln51_reg_227, M_AXIS_V_TREADY_int_regslice)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((icmp_ln51_reg_227 = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice));
    end process;


    ap_block_state7_io_assign_proc : process(icmp_ln51_reg_227_pp1_iter1_reg, M_AXIS_V_TREADY_int_regslice)
    begin
                ap_block_state7_io <= ((icmp_ln51_reg_227_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice));
    end process;


    ap_block_state7_pp1_stage0_iter2_assign_proc : process(icmp_ln51_reg_227_pp1_iter1_reg, M_AXIS_V_TREADY_int_regslice)
    begin
                ap_block_state7_pp1_stage0_iter2 <= ((icmp_ln51_reg_227_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_AXIS_V_TREADY_int_regslice));
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln51_fu_164_p2)
    begin
        if ((icmp_ln51_fu_164_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln174_1_fu_175_p1 <= weights_0_q0;
    bitcast_ln174_fu_192_p1 <= weights_0_q0;
    icmp_ln47_fu_138_p2 <= "1" when (j_reg_110 = ap_const_lv10_231) else "0";
    icmp_ln51_fu_164_p2 <= "1" when (j_1_reg_121 = ap_const_lv10_230) else "0";
    j_1_cast_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_121),64));
    j_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_110),64));
    or_ln174_1_fu_179_p3 <= (ap_const_lv1_1 & bitcast_ln174_1_fu_175_p1);
    or_ln_fu_196_p3 <= (ap_const_lv1_1 & bitcast_ln174_fu_192_p1);
    trunc_ln48_fu_149_p1 <= S_AXIS_V_TDATA_int_regslice(32 - 1 downto 0);

    weights_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, j_cast_fu_144_p1, j_1_cast_fu_170_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_0_address0 <= ap_const_lv64_230(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            weights_0_address0 <= j_1_cast_fu_170_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_0_address0 <= j_cast_fu_144_p1(10 - 1 downto 0);
        else 
            weights_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    weights_0_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_138_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, S_AXIS_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_V_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            weights_0_ce0 <= ap_const_logic_1;
        else 
            weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_0_d0 <= trunc_ln48_fu_149_p1;

    weights_0_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_138_p2, S_AXIS_V_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_V_TVALID_int_regslice))) and (icmp_ln47_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_0_we0 <= ap_const_logic_1;
        else 
            weights_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln174_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln174_1_fu_179_p3),64));
    zext_ln174_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_196_p3),64));
end behav;
