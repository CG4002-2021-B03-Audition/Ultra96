// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.352000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=26,HLS_SYN_LUT=165,HLS_VERSION=2020_1}" *)

module mlp (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln22_fu_133_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [5:0] j_fu_139_p2;
reg    ap_block_state3;
wire   [5:0] j_1_fu_161_p2;
reg   [5:0] j_1_reg_195;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln26_fu_155_p2;
wire   [0:0] tmp_last_fu_178_p2;
reg   [0:0] tmp_last_reg_205;
wire   [31:0] weights_0_q0;
reg   [9:0] weights_0_address0;
reg    weights_0_ce0;
reg    weights_0_we0;
reg   [5:0] j_0_reg_100;
wire    ap_CS_fsm_state2;
reg   [0:0] out_1_0_reg_111;
reg   [5:0] j1_0_reg_122;
wire   [63:0] zext_ln24_fu_150_p1;
wire   [63:0] zext_ln27_fu_167_p1;
wire   [0:0] icmp_ln28_fu_172_p2;
reg   [5:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

mlp_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 561 ),
    .AddressWidth( 10 ))
weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_0_address0),
    .ce0(weights_0_ce0),
    .we0(weights_0_we0),
    .d0(S_AXIS_TDATA_int),
    .q0(weights_0_q0)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weights_0_q0),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln22_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j1_0_reg_122 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == M_AXIS_TREADY_int))) begin
        j1_0_reg_122 <= j_1_reg_195;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln22_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_100 <= j_fu_139_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_0_reg_100 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln22_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_1_0_reg_111 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == M_AXIS_TREADY_int))) begin
        out_1_0_reg_111 <= tmp_last_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_195 <= j_1_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_last_reg_205 <= tmp_last_fu_178_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == M_AXIS_TREADY_int))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_S_AXIS_V_data_U_ack_in == 1'b1) & (1'b1 == S_AXIS_TVALID))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln22_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_0_address0 = zext_ln27_fu_167_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_0_address0 = zext_ln24_fu_150_p1;
    end else begin
        weights_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state3)))) begin
        weights_0_ce0 = 1'b1;
    end else begin
        weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln22_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        weights_0_we0 = 1'b1;
    end else begin
        weights_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln22_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln22_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln26_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == M_AXIS_TREADY_int))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == M_AXIS_TREADY_int))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TLAST_int = tmp_last_reg_205;

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state3 = ((icmp_ln22_fu_133_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln22_fu_133_p2 = ((j_0_reg_100 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_155_p2 = ((j1_0_reg_122 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_172_p2 = ((j1_0_reg_122 == 6'd31) ? 1'b1 : 1'b0);

assign j_1_fu_161_p2 = (j1_0_reg_122 + 6'd1);

assign j_fu_139_p2 = (j_0_reg_100 + 6'd1);

assign tmp_last_fu_178_p2 = (out_1_0_reg_111 | icmp_ln28_fu_172_p2);

assign zext_ln24_fu_150_p1 = j_0_reg_100;

assign zext_ln27_fu_167_p1 = j1_0_reg_122;

endmodule //mlp
