-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of mlp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.352000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=26,HLS_SYN_LUT=165,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln22_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_fu_139_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal j_1_fu_161_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_195 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln26_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_0_ce0 : STD_LOGIC;
    signal weights_0_we0 : STD_LOGIC;
    signal j_0_reg_100 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_1_0_reg_111 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_0_reg_122 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_S_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TVALID_int : STD_LOGIC;
    signal S_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_S_AXIS_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_ack_in : STD_LOGIC;
    signal regslice_both_M_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal M_AXIS_TVALID_int : STD_LOGIC;
    signal M_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_M_AXIS_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal M_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_vld_out : STD_LOGIC;

    component mlp_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    weights_0_U : component mlp_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 561,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_0_address0,
        ce0 => weights_0_ce0,
        we0 => weights_0_we0,
        d0 => S_AXIS_TDATA_int,
        q0 => weights_0_q0);

    regslice_both_S_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TDATA,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_data_U_ack_in,
        data_out => S_AXIS_TDATA_int,
        vld_out => S_AXIS_TVALID_int,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_S_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_S_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TLAST,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_w1_S_AXIS_V_last_U_ack_in,
        data_out => S_AXIS_TLAST_int,
        vld_out => regslice_both_w1_S_AXIS_V_last_U_vld_out,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_w1_S_AXIS_V_last_U_apdone_blk);

    regslice_both_M_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weights_0_q0,
        vld_in => M_AXIS_TVALID_int,
        ack_in => M_AXIS_TREADY_int,
        data_out => M_AXIS_TDATA,
        vld_out => regslice_both_M_AXIS_V_data_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_M_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_TLAST_int,
        vld_in => M_AXIS_TVALID_int,
        ack_in => regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy,
        data_out => M_AXIS_TLAST,
        vld_out => regslice_both_w1_M_AXIS_V_last_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_w1_M_AXIS_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln22_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j1_0_reg_122 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then 
                j1_0_reg_122 <= j_1_reg_195;
            end if; 
        end if;
    end process;

    j_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_100 <= j_fu_139_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_0_reg_100 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    out_1_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln22_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_1_0_reg_111 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then 
                out_1_0_reg_111 <= tmp_last_reg_205;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_195 <= j_1_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_last_reg_205 <= tmp_last_fu_178_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, icmp_ln22_fu_133_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, icmp_ln26_fu_155_p2, S_AXIS_TVALID_int, M_AXIS_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln22_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln26_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    M_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_TREADY_int;
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TLAST_int <= tmp_last_reg_205(0);
    M_AXIS_TVALID <= regslice_both_M_AXIS_V_data_U_vld_out;

    M_AXIS_TVALID_int_assign_proc : process(ap_CS_fsm_state5, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then 
            M_AXIS_TVALID_int <= ap_const_logic_1;
        else 
            M_AXIS_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln22_fu_133_p2, S_AXIS_TVALID_int)
    begin
        if (((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_TVALID_int;
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_AXIS_TREADY_assign_proc : process(S_AXIS_TVALID, regslice_both_S_AXIS_V_data_U_ack_in)
    begin
        if (((regslice_both_S_AXIS_V_data_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = S_AXIS_TVALID))) then 
            S_AXIS_TREADY <= ap_const_logic_1;
        else 
            S_AXIS_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TREADY_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln22_fu_133_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            S_AXIS_TREADY_int <= ap_const_logic_1;
        else 
            S_AXIS_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state3_assign_proc : process(icmp_ln22_fu_133_p2, S_AXIS_TVALID_int)
    begin
                ap_block_state3 <= ((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln22_fu_133_p2 <= "1" when (j_0_reg_100 = ap_const_lv6_20) else "0";
    icmp_ln26_fu_155_p2 <= "1" when (j1_0_reg_122 = ap_const_lv6_20) else "0";
    icmp_ln28_fu_172_p2 <= "1" when (j1_0_reg_122 = ap_const_lv6_1F) else "0";
    j_1_fu_161_p2 <= std_logic_vector(unsigned(j1_0_reg_122) + unsigned(ap_const_lv6_1));
    j_fu_139_p2 <= std_logic_vector(unsigned(j_0_reg_100) + unsigned(ap_const_lv6_1));
    tmp_last_fu_178_p2 <= (out_1_0_reg_111 or icmp_ln28_fu_172_p2);

    weights_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln24_fu_150_p1, zext_ln27_fu_167_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_0_address0 <= zext_ln27_fu_167_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_0_address0 <= zext_ln24_fu_150_p1(10 - 1 downto 0);
        else 
            weights_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    weights_0_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln22_fu_133_p2, ap_CS_fsm_state4, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            weights_0_ce0 <= ap_const_logic_1;
        else 
            weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_0_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln22_fu_133_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln22_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_0_we0 <= ap_const_logic_1;
        else 
            weights_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln24_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_100),64));
    zext_ln27_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_122),64));
end behav;
