// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mlp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mlp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mlp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> mlp::ap_ST_fsm_state1 = "1";
const sc_lv<6> mlp::ap_ST_fsm_state2 = "10";
const sc_lv<6> mlp::ap_ST_fsm_state3 = "100";
const sc_lv<6> mlp::ap_ST_fsm_state4 = "1000";
const sc_lv<6> mlp::ap_ST_fsm_state5 = "10000";
const sc_lv<6> mlp::ap_ST_fsm_state6 = "100000";
const sc_lv<32> mlp::ap_const_lv32_2 = "10";
const sc_lv<1> mlp::ap_const_lv1_0 = "0";
const sc_lv<32> mlp::ap_const_lv32_4 = "100";
const sc_lv<32> mlp::ap_const_lv32_5 = "101";
const sc_lv<32> mlp::ap_const_lv32_3 = "11";
const sc_lv<6> mlp::ap_const_lv6_0 = "000000";
const sc_lv<32> mlp::ap_const_lv32_1 = "1";
const sc_lv<1> mlp::ap_const_lv1_1 = "1";
const sc_lv<6> mlp::ap_const_lv6_20 = "100000";
const sc_lv<6> mlp::ap_const_lv6_1 = "1";
const sc_lv<6> mlp::ap_const_lv6_1F = "11111";
const bool mlp::ap_const_boolean_1 = true;

mlp::mlp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    weights_0_U = new mlp_weights_0("weights_0_U");
    weights_0_U->clk(ap_clk);
    weights_0_U->reset(ap_rst_n_inv);
    weights_0_U->address0(weights_0_address0);
    weights_0_U->ce0(weights_0_ce0);
    weights_0_U->we0(weights_0_we0);
    weights_0_U->d0(S_AXIS_TDATA_int);
    weights_0_U->q0(weights_0_q0);
    regslice_both_S_AXIS_V_data_U = new regslice_both<32>("regslice_both_S_AXIS_V_data_U");
    regslice_both_S_AXIS_V_data_U->ap_clk(ap_clk);
    regslice_both_S_AXIS_V_data_U->ap_rst(ap_rst_n_inv);
    regslice_both_S_AXIS_V_data_U->data_in(S_AXIS_TDATA);
    regslice_both_S_AXIS_V_data_U->vld_in(S_AXIS_TVALID);
    regslice_both_S_AXIS_V_data_U->ack_in(regslice_both_S_AXIS_V_data_U_ack_in);
    regslice_both_S_AXIS_V_data_U->data_out(S_AXIS_TDATA_int);
    regslice_both_S_AXIS_V_data_U->vld_out(S_AXIS_TVALID_int);
    regslice_both_S_AXIS_V_data_U->ack_out(S_AXIS_TREADY_int);
    regslice_both_S_AXIS_V_data_U->apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk);
    regslice_both_w1_S_AXIS_V_last_U = new regslice_both_w1<1>("regslice_both_w1_S_AXIS_V_last_U");
    regslice_both_w1_S_AXIS_V_last_U->ap_clk(ap_clk);
    regslice_both_w1_S_AXIS_V_last_U->ap_rst(ap_rst_n_inv);
    regslice_both_w1_S_AXIS_V_last_U->data_in(S_AXIS_TLAST);
    regslice_both_w1_S_AXIS_V_last_U->vld_in(S_AXIS_TVALID);
    regslice_both_w1_S_AXIS_V_last_U->ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in);
    regslice_both_w1_S_AXIS_V_last_U->data_out(S_AXIS_TLAST_int);
    regslice_both_w1_S_AXIS_V_last_U->vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out);
    regslice_both_w1_S_AXIS_V_last_U->ack_out(S_AXIS_TREADY_int);
    regslice_both_w1_S_AXIS_V_last_U->apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk);
    regslice_both_M_AXIS_V_data_U = new regslice_both<32>("regslice_both_M_AXIS_V_data_U");
    regslice_both_M_AXIS_V_data_U->ap_clk(ap_clk);
    regslice_both_M_AXIS_V_data_U->ap_rst(ap_rst_n_inv);
    regslice_both_M_AXIS_V_data_U->data_in(weights_0_q0);
    regslice_both_M_AXIS_V_data_U->vld_in(M_AXIS_TVALID_int);
    regslice_both_M_AXIS_V_data_U->ack_in(M_AXIS_TREADY_int);
    regslice_both_M_AXIS_V_data_U->data_out(M_AXIS_TDATA);
    regslice_both_M_AXIS_V_data_U->vld_out(regslice_both_M_AXIS_V_data_U_vld_out);
    regslice_both_M_AXIS_V_data_U->ack_out(M_AXIS_TREADY);
    regslice_both_M_AXIS_V_data_U->apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk);
    regslice_both_w1_M_AXIS_V_last_U = new regslice_both_w1<1>("regslice_both_w1_M_AXIS_V_last_U");
    regslice_both_w1_M_AXIS_V_last_U->ap_clk(ap_clk);
    regslice_both_w1_M_AXIS_V_last_U->ap_rst(ap_rst_n_inv);
    regslice_both_w1_M_AXIS_V_last_U->data_in(M_AXIS_TLAST_int);
    regslice_both_w1_M_AXIS_V_last_U->vld_in(M_AXIS_TVALID_int);
    regslice_both_w1_M_AXIS_V_last_U->ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy);
    regslice_both_w1_M_AXIS_V_last_U->data_out(M_AXIS_TLAST);
    regslice_both_w1_M_AXIS_V_last_U->vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out);
    regslice_both_w1_M_AXIS_V_last_U->ack_out(M_AXIS_TREADY);
    regslice_both_w1_M_AXIS_V_last_U->apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_M_AXIS_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( M_AXIS_TREADY_int );

    SC_METHOD(thread_M_AXIS_TLAST_int);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_last_reg_205 );

    SC_METHOD(thread_M_AXIS_TVALID);
    sensitive << ( regslice_both_M_AXIS_V_data_U_vld_out );

    SC_METHOD(thread_M_AXIS_TVALID_int);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( M_AXIS_TREADY_int );

    SC_METHOD(thread_S_AXIS_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_133_p2 );
    sensitive << ( S_AXIS_TVALID_int );

    SC_METHOD(thread_S_AXIS_TREADY);
    sensitive << ( S_AXIS_TVALID );
    sensitive << ( regslice_both_S_AXIS_V_data_U_ack_in );

    SC_METHOD(thread_S_AXIS_TREADY_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_133_p2 );
    sensitive << ( S_AXIS_TVALID_int );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( icmp_ln22_fu_133_p2 );
    sensitive << ( S_AXIS_TVALID_int );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_icmp_ln22_fu_133_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_133_p2 );
    sensitive << ( j_0_reg_100 );
    sensitive << ( S_AXIS_TVALID_int );

    SC_METHOD(thread_icmp_ln26_fu_155_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j1_0_reg_122 );

    SC_METHOD(thread_icmp_ln28_fu_172_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln26_fu_155_p2 );
    sensitive << ( j1_0_reg_122 );

    SC_METHOD(thread_j_1_fu_161_p2);
    sensitive << ( j1_0_reg_122 );

    SC_METHOD(thread_j_fu_139_p2);
    sensitive << ( j_0_reg_100 );

    SC_METHOD(thread_tmp_last_fu_178_p2);
    sensitive << ( out_1_0_reg_111 );
    sensitive << ( icmp_ln28_fu_172_p2 );

    SC_METHOD(thread_weights_0_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln24_fu_150_p1 );
    sensitive << ( zext_ln27_fu_167_p1 );

    SC_METHOD(thread_weights_0_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_133_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( S_AXIS_TVALID_int );

    SC_METHOD(thread_weights_0_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_133_p2 );
    sensitive << ( S_AXIS_TVALID_int );

    SC_METHOD(thread_zext_ln24_fu_150_p1);
    sensitive << ( j_0_reg_100 );

    SC_METHOD(thread_zext_ln27_fu_167_p1);
    sensitive << ( j1_0_reg_122 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_133_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln26_fu_155_p2 );
    sensitive << ( S_AXIS_TVALID_int );
    sensitive << ( M_AXIS_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mlp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, S_AXIS_TDATA, "(port)S_AXIS_TDATA");
    sc_trace(mVcdFile, S_AXIS_TVALID, "(port)S_AXIS_TVALID");
    sc_trace(mVcdFile, S_AXIS_TREADY, "(port)S_AXIS_TREADY");
    sc_trace(mVcdFile, S_AXIS_TLAST, "(port)S_AXIS_TLAST");
    sc_trace(mVcdFile, M_AXIS_TDATA, "(port)M_AXIS_TDATA");
    sc_trace(mVcdFile, M_AXIS_TVALID, "(port)M_AXIS_TVALID");
    sc_trace(mVcdFile, M_AXIS_TREADY, "(port)M_AXIS_TREADY");
    sc_trace(mVcdFile, M_AXIS_TLAST, "(port)M_AXIS_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, S_AXIS_TDATA_blk_n, "S_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln22_fu_133_p2, "icmp_ln22_fu_133_p2");
    sc_trace(mVcdFile, M_AXIS_TDATA_blk_n, "M_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, j_fu_139_p2, "j_fu_139_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, j_1_fu_161_p2, "j_1_fu_161_p2");
    sc_trace(mVcdFile, j_1_reg_195, "j_1_reg_195");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln26_fu_155_p2, "icmp_ln26_fu_155_p2");
    sc_trace(mVcdFile, tmp_last_fu_178_p2, "tmp_last_fu_178_p2");
    sc_trace(mVcdFile, tmp_last_reg_205, "tmp_last_reg_205");
    sc_trace(mVcdFile, weights_0_q0, "weights_0_q0");
    sc_trace(mVcdFile, weights_0_address0, "weights_0_address0");
    sc_trace(mVcdFile, weights_0_ce0, "weights_0_ce0");
    sc_trace(mVcdFile, weights_0_we0, "weights_0_we0");
    sc_trace(mVcdFile, j_0_reg_100, "j_0_reg_100");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, out_1_0_reg_111, "out_1_0_reg_111");
    sc_trace(mVcdFile, j1_0_reg_122, "j1_0_reg_122");
    sc_trace(mVcdFile, zext_ln24_fu_150_p1, "zext_ln24_fu_150_p1");
    sc_trace(mVcdFile, zext_ln27_fu_167_p1, "zext_ln27_fu_167_p1");
    sc_trace(mVcdFile, icmp_ln28_fu_172_p2, "icmp_ln28_fu_172_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, regslice_both_S_AXIS_V_data_U_apdone_blk, "regslice_both_S_AXIS_V_data_U_apdone_blk");
    sc_trace(mVcdFile, S_AXIS_TDATA_int, "S_AXIS_TDATA_int");
    sc_trace(mVcdFile, S_AXIS_TVALID_int, "S_AXIS_TVALID_int");
    sc_trace(mVcdFile, S_AXIS_TREADY_int, "S_AXIS_TREADY_int");
    sc_trace(mVcdFile, regslice_both_S_AXIS_V_data_U_ack_in, "regslice_both_S_AXIS_V_data_U_ack_in");
    sc_trace(mVcdFile, regslice_both_w1_S_AXIS_V_last_U_apdone_blk, "regslice_both_w1_S_AXIS_V_last_U_apdone_blk");
    sc_trace(mVcdFile, S_AXIS_TLAST_int, "S_AXIS_TLAST_int");
    sc_trace(mVcdFile, regslice_both_w1_S_AXIS_V_last_U_vld_out, "regslice_both_w1_S_AXIS_V_last_U_vld_out");
    sc_trace(mVcdFile, regslice_both_w1_S_AXIS_V_last_U_ack_in, "regslice_both_w1_S_AXIS_V_last_U_ack_in");
    sc_trace(mVcdFile, regslice_both_M_AXIS_V_data_U_apdone_blk, "regslice_both_M_AXIS_V_data_U_apdone_blk");
    sc_trace(mVcdFile, M_AXIS_TVALID_int, "M_AXIS_TVALID_int");
    sc_trace(mVcdFile, M_AXIS_TREADY_int, "M_AXIS_TREADY_int");
    sc_trace(mVcdFile, regslice_both_M_AXIS_V_data_U_vld_out, "regslice_both_M_AXIS_V_data_U_vld_out");
    sc_trace(mVcdFile, regslice_both_w1_M_AXIS_V_last_U_apdone_blk, "regslice_both_w1_M_AXIS_V_last_U_apdone_blk");
    sc_trace(mVcdFile, M_AXIS_TLAST_int, "M_AXIS_TLAST_int");
    sc_trace(mVcdFile, regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy, "regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_w1_M_AXIS_V_last_U_vld_out, "regslice_both_w1_M_AXIS_V_last_U_vld_out");
#endif

    }
    mHdltvinHandle.open("mlp.hdltvin.dat");
    mHdltvoutHandle.open("mlp.hdltvout.dat");
}

mlp::~mlp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete weights_0_U;
    delete regslice_both_S_AXIS_V_data_U;
    delete regslice_both_w1_S_AXIS_V_last_U;
    delete regslice_both_M_AXIS_V_data_U;
    delete regslice_both_w1_M_AXIS_V_last_U;
}

void mlp::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read())))) {
        j1_0_reg_122 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(M_AXIS_TREADY_int.read(), ap_const_logic_1))) {
        j1_0_reg_122 = j_1_reg_195.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read())))) {
        j_0_reg_100 = j_fu_139_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_0_reg_100 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read())))) {
        out_1_0_reg_111 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(M_AXIS_TREADY_int.read(), ap_const_logic_1))) {
        out_1_0_reg_111 = tmp_last_reg_205.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_1_reg_195 = j_1_fu_161_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_155_p2.read()))) {
        tmp_last_reg_205 = tmp_last_fu_178_p2.read();
    }
}

void mlp::thread_M_AXIS_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int.read();
    } else {
        M_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void mlp::thread_M_AXIS_TLAST_int() {
    M_AXIS_TLAST_int =  (sc_logic) (tmp_last_reg_205.read()[0]);
}

void mlp::thread_M_AXIS_TVALID() {
    M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out.read();
}

void mlp::thread_M_AXIS_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(M_AXIS_TREADY_int.read(), ap_const_logic_1))) {
        M_AXIS_TVALID_int = ap_const_logic_1;
    } else {
        M_AXIS_TVALID_int = ap_const_logic_0;
    }
}

void mlp::thread_S_AXIS_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0))) {
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int.read();
    } else {
        S_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void mlp::thread_S_AXIS_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, S_AXIS_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_S_AXIS_V_data_U_ack_in.read()))) {
        S_AXIS_TREADY = ap_const_logic_1;
    } else {
        S_AXIS_TREADY = ap_const_logic_0;
    }
}

void mlp::thread_S_AXIS_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read())))) {
        S_AXIS_TREADY_int = ap_const_logic_1;
    } else {
        S_AXIS_TREADY_int = ap_const_logic_0;
    }
}

void mlp::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mlp::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mlp::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mlp::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mlp::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mlp::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read()));
}

void mlp::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mlp::thread_icmp_ln22_fu_133_p2() {
    icmp_ln22_fu_133_p2 = (!j_0_reg_100.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_100.read() == ap_const_lv6_20);
}

void mlp::thread_icmp_ln26_fu_155_p2() {
    icmp_ln26_fu_155_p2 = (!j1_0_reg_122.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j1_0_reg_122.read() == ap_const_lv6_20);
}

void mlp::thread_icmp_ln28_fu_172_p2() {
    icmp_ln28_fu_172_p2 = (!j1_0_reg_122.read().is_01() || !ap_const_lv6_1F.is_01())? sc_lv<1>(): sc_lv<1>(j1_0_reg_122.read() == ap_const_lv6_1F);
}

void mlp::thread_j_1_fu_161_p2() {
    j_1_fu_161_p2 = (!j1_0_reg_122.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j1_0_reg_122.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mlp::thread_j_fu_139_p2() {
    j_fu_139_p2 = (!j_0_reg_100.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_0_reg_100.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mlp::thread_tmp_last_fu_178_p2() {
    tmp_last_fu_178_p2 = (icmp_ln28_fu_172_p2.read() | out_1_0_reg_111.read());
}

void mlp::thread_weights_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        weights_0_address0 =  (sc_lv<10>) (zext_ln27_fu_167_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        weights_0_address0 =  (sc_lv<10>) (zext_ln24_fu_150_p1.read());
    } else {
        weights_0_address0 = "XXXXXXXXXX";
    }
}

void mlp::thread_weights_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read()))))) {
        weights_0_ce0 = ap_const_logic_1;
    } else {
        weights_0_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_weights_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read())))) {
        weights_0_we0 = ap_const_logic_1;
    } else {
        weights_0_we0 = ap_const_logic_0;
    }
}

void mlp::thread_zext_ln24_fu_150_p1() {
    zext_ln24_fu_150_p1 = esl_zext<64,6>(j_0_reg_100.read());
}

void mlp::thread_zext_ln27_fu_167_p1() {
    zext_ln27_fu_167_p1 = esl_zext<64,6>(j1_0_reg_122.read());
}

void mlp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln22_fu_133_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, S_AXIS_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln26_fu_155_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(M_AXIS_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(M_AXIS_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void mlp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_AXIS_TDATA\" :  \"" << S_AXIS_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_AXIS_TVALID\" :  \"" << S_AXIS_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"S_AXIS_TREADY\" :  \"" << S_AXIS_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_AXIS_TLAST\" :  \"" << S_AXIS_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_AXIS_TDATA\" :  \"" << M_AXIS_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_AXIS_TVALID\" :  \"" << M_AXIS_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_AXIS_TREADY\" :  \"" << M_AXIS_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_AXIS_TLAST\" :  \"" << M_AXIS_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

