// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mlp_HH_
#define _mlp_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mlp_weights_0.h"

namespace ap_rtl {

struct mlp : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > S_AXIS_TDATA;
    sc_in< sc_logic > S_AXIS_TVALID;
    sc_out< sc_logic > S_AXIS_TREADY;
    sc_in< sc_logic > S_AXIS_TLAST;
    sc_out< sc_lv<32> > M_AXIS_TDATA;
    sc_out< sc_logic > M_AXIS_TVALID;
    sc_in< sc_logic > M_AXIS_TREADY;
    sc_out< sc_logic > M_AXIS_TLAST;


    // Module declarations
    mlp(sc_module_name name);
    SC_HAS_PROCESS(mlp);

    ~mlp();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mlp_weights_0* weights_0_U;
    regslice_both<32>* regslice_both_S_AXIS_V_data_U;
    regslice_both_w1<1>* regslice_both_w1_S_AXIS_V_last_U;
    regslice_both<32>* regslice_both_M_AXIS_V_data_U;
    regslice_both_w1<1>* regslice_both_w1_M_AXIS_V_last_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > S_AXIS_TDATA_blk_n;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln22_fu_133_p2;
    sc_signal< sc_logic > M_AXIS_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > j_fu_139_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<6> > j_1_fu_161_p2;
    sc_signal< sc_lv<6> > j_1_reg_195;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln26_fu_155_p2;
    sc_signal< sc_lv<1> > tmp_last_fu_178_p2;
    sc_signal< sc_lv<1> > tmp_last_reg_205;
    sc_signal< sc_lv<32> > weights_0_q0;
    sc_signal< sc_lv<10> > weights_0_address0;
    sc_signal< sc_logic > weights_0_ce0;
    sc_signal< sc_logic > weights_0_we0;
    sc_signal< sc_lv<6> > j_0_reg_100;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > out_1_0_reg_111;
    sc_signal< sc_lv<6> > j1_0_reg_122;
    sc_signal< sc_lv<64> > zext_ln24_fu_150_p1;
    sc_signal< sc_lv<64> > zext_ln27_fu_167_p1;
    sc_signal< sc_lv<1> > icmp_ln28_fu_172_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_S_AXIS_V_data_U_apdone_blk;
    sc_signal< sc_lv<32> > S_AXIS_TDATA_int;
    sc_signal< sc_logic > S_AXIS_TVALID_int;
    sc_signal< sc_logic > S_AXIS_TREADY_int;
    sc_signal< sc_logic > regslice_both_S_AXIS_V_data_U_ack_in;
    sc_signal< sc_logic > regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
    sc_signal< sc_logic > S_AXIS_TLAST_int;
    sc_signal< sc_logic > regslice_both_w1_S_AXIS_V_last_U_vld_out;
    sc_signal< sc_logic > regslice_both_w1_S_AXIS_V_last_U_ack_in;
    sc_signal< sc_logic > regslice_both_M_AXIS_V_data_U_apdone_blk;
    sc_signal< sc_logic > M_AXIS_TVALID_int;
    sc_signal< sc_logic > M_AXIS_TREADY_int;
    sc_signal< sc_logic > regslice_both_M_AXIS_V_data_U_vld_out;
    sc_signal< sc_logic > regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
    sc_signal< sc_logic > M_AXIS_TLAST_int;
    sc_signal< sc_logic > regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_w1_M_AXIS_V_last_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_M_AXIS_TDATA_blk_n();
    void thread_M_AXIS_TLAST_int();
    void thread_M_AXIS_TVALID();
    void thread_M_AXIS_TVALID_int();
    void thread_S_AXIS_TDATA_blk_n();
    void thread_S_AXIS_TREADY();
    void thread_S_AXIS_TREADY_int();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state3();
    void thread_ap_rst_n_inv();
    void thread_icmp_ln22_fu_133_p2();
    void thread_icmp_ln26_fu_155_p2();
    void thread_icmp_ln28_fu_172_p2();
    void thread_j_1_fu_161_p2();
    void thread_j_fu_139_p2();
    void thread_tmp_last_fu_178_p2();
    void thread_weights_0_address0();
    void thread_weights_0_ce0();
    void thread_weights_0_we0();
    void thread_zext_ln24_fu_150_p1();
    void thread_zext_ln27_fu_167_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
